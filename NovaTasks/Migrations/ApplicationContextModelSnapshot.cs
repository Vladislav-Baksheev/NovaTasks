// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NovaTasks.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace NovaTasks.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("NovaTasks.Models.Board", b =>
                {
                    b.Property<int>("BoardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("board_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BoardId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<int>("WorkspaceId")
                        .HasColumnType("integer")
                        .HasColumnName("workspace_id");

                    b.HasKey("BoardId");

                    b.HasIndex("WorkspaceId");

                    b.ToTable("boards", (string)null);
                });

            modelBuilder.Entity("NovaTasks.Models.Label", b =>
                {
                    b.Property<int>("LabelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("label_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LabelId"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("color");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("LabelId");

                    b.ToTable("labels", (string)null);
                });

            modelBuilder.Entity("NovaTasks.Models.Task", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("task_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TaskId"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("color");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("due_date");

                    b.Property<bool>("IsComplete")
                        .HasColumnType("boolean")
                        .HasColumnName("is_complete");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<int>("TasksListId")
                        .HasColumnType("integer")
                        .HasColumnName("tasks_list_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("TaskId");

                    b.HasIndex("EndDate")
                        .HasDatabaseName("ix_tasks_due_date");

                    b.HasIndex("TasksListId")
                        .HasDatabaseName("ix_tasks_list_id");

                    b.ToTable("tasks", (string)null);
                });

            modelBuilder.Entity("NovaTasks.Models.TaskAssignee", b =>
                {
                    b.Property<int>("TaskId")
                        .HasColumnType("integer")
                        .HasColumnName("task_id");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("TaskId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("task_assignees", (string)null);
                });

            modelBuilder.Entity("NovaTasks.Models.TaskLabel", b =>
                {
                    b.Property<int>("TaskId")
                        .HasColumnType("integer")
                        .HasColumnName("task_id");

                    b.Property<int>("LabelId")
                        .HasColumnType("integer")
                        .HasColumnName("label_id");

                    b.HasKey("TaskId", "LabelId");

                    b.HasIndex("LabelId");

                    b.ToTable("task_labels", (string)null);
                });

            modelBuilder.Entity("NovaTasks.Models.TasksList", b =>
                {
                    b.Property<int>("TasksListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("tasks_list_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TasksListId"));

                    b.Property<int>("BoardId")
                        .HasColumnType("integer")
                        .HasColumnName("board_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.HasKey("TasksListId");

                    b.HasIndex("BoardId");

                    b.ToTable("tasks_list", (string)null);
                });

            modelBuilder.Entity("NovaTasks.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("NovaTasks.Models.Workspace", b =>
                {
                    b.Property<int>("WorkspaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("workspace_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WorkspaceId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<string>("Visibility")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("visibility");

                    b.HasKey("WorkspaceId");

                    b.ToTable("workspaces", (string)null);
                });

            modelBuilder.Entity("NovaTasks.Models.WorkspaceMember", b =>
                {
                    b.Property<int>("WorkspaceId")
                        .HasColumnType("integer")
                        .HasColumnName("workspace_id");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("role");

                    b.HasKey("WorkspaceId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("workspace_members", (string)null);
                });

            modelBuilder.Entity("NovaTasks.Models.Board", b =>
                {
                    b.HasOne("NovaTasks.Models.Workspace", "Workspace")
                        .WithMany("Boards")
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_boards_workspaces");

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("NovaTasks.Models.Task", b =>
                {
                    b.HasOne("NovaTasks.Models.TasksList", "TasksList")
                        .WithMany("Tasks")
                        .HasForeignKey("TasksListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tasks_tasks_list");

                    b.Navigation("TasksList");
                });

            modelBuilder.Entity("NovaTasks.Models.TaskAssignee", b =>
                {
                    b.HasOne("NovaTasks.Models.Task", "Task")
                        .WithMany("TaskAssignees")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NovaTasks.Models.User", "User")
                        .WithMany("AssignedTasks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_task_assignees_users");

                    b.Navigation("Task");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NovaTasks.Models.TaskLabel", b =>
                {
                    b.HasOne("NovaTasks.Models.Label", "Label")
                        .WithMany("TaskLabels")
                        .HasForeignKey("LabelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_task_labels_labels");

                    b.HasOne("NovaTasks.Models.Task", "Task")
                        .WithMany("TaskLabels")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_task_labels_tasks");

                    b.Navigation("Label");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("NovaTasks.Models.TasksList", b =>
                {
                    b.HasOne("NovaTasks.Models.Board", "Board")
                        .WithMany("TasksLists")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tasks_list_boards");

                    b.Navigation("Board");
                });

            modelBuilder.Entity("NovaTasks.Models.WorkspaceMember", b =>
                {
                    b.HasOne("NovaTasks.Models.User", "User")
                        .WithMany("WorkspaceMemberships")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_workspace_members_users");

                    b.HasOne("NovaTasks.Models.Workspace", "Workspace")
                        .WithMany("Members")
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_workspace_members_workspaces");

                    b.Navigation("User");

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("NovaTasks.Models.Board", b =>
                {
                    b.Navigation("TasksLists");
                });

            modelBuilder.Entity("NovaTasks.Models.Label", b =>
                {
                    b.Navigation("TaskLabels");
                });

            modelBuilder.Entity("NovaTasks.Models.Task", b =>
                {
                    b.Navigation("TaskAssignees");

                    b.Navigation("TaskLabels");
                });

            modelBuilder.Entity("NovaTasks.Models.TasksList", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("NovaTasks.Models.User", b =>
                {
                    b.Navigation("AssignedTasks");

                    b.Navigation("WorkspaceMemberships");
                });

            modelBuilder.Entity("NovaTasks.Models.Workspace", b =>
                {
                    b.Navigation("Boards");

                    b.Navigation("Members");
                });
#pragma warning restore 612, 618
        }
    }
}
